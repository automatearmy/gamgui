# GAMGUI MVP - Navbar Implementation

## Current Task
Implement the navigation sidebar/navbar as the first component of the GAMGUI MVP version.

## Project Context
GAMGUI is a secure, cloud-based system for executing GAM (Google Apps Manager) commands. This MVP focuses on creating the core navigation interface that will be used throughout the application.

## Technology Stack
- Vite as the build tool
- React 19
- TypeScript
- Tailwind CSS for styling
- @remixicon/react for icons

## Navbar Requirements

### Visual Design
- The navbar should match the design shown in the reference images
- It should support both light and dark themes
- The active link should be highlighted with indigo color

### Layout & Responsiveness
- Desktop: Full sidebar on the left side of the screen
- Mobile: Collapsed top bar with hamburger menu that expands
- The navbar should adapt to different screen sizes

### Navigation Items
1. Main navigation:
   - Sessions (with icon)
   - Settings (with icon)

2. Shortcuts section with links:
   - Add new user
   - Workspace usage
   - Cost spend control
   - Overview - Rows written

3. User profile section:
   - User avatar/initials
   - User name
   - User role

## Implementation Approach
1. Start by creating the component structure:
   - `src/components/sidebar/index.tsx` (main component)
   - `src/components/sidebar/MobileSidebar.tsx`
   - `src/components/sidebar/UserProfile.tsx`

2. Implement desktop version first, then mobile
3. Use utility functions for consistent styling
4. Ensure proper accessibility

## Code Structure Guidelines

### Utilities
```typescript
// src/lib/utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cx(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export const focusRing = "focus:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500 focus-visible:ring-offset-2 dark:focus-visible:ring-offset-gray-900"
```

### Component Architecture
- Use functional components with hooks
- Keep components small and focused
- Follow TypeScript best practices
- Use consistent naming patterns

## Priority Features
1. Basic navigation structure
2. Responsive layout (desktop/mobile)
3. Active link highlighting
4. Dark mode support

## Non-critical Features (Can Be Added Later)
- Animation effects
- Dropdown submenus
- Advanced user profile options
- Workspace switching functionality

## Testing Criteria
- Component renders as expected in both desktop and mobile views
- Navigation links work correctly
- Active state is properly highlighted
- Dark mode styling is applied correctly
- Mobile menu opens and closes properly

## Reference Code Examples
See the previously shared implementation guide for code examples and patterns to follow.